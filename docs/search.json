[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Stock Return Analysis",
    "section": "",
    "text": "Understanding the characteristics of financial data is a first step for quantitative research. For this project, we chose to analyze stock daily return data from the S&P 500 index because it offers a diverse and widely studied dataset that is crucial for exploring key financial metrics. By examining raw stock return, we can compute essential statistics such as mean and variance (volatility), correlation between stocks, and the distribution of daily returns. This analysis forms the foundation for understanding how individual stocks behave and interact within the broader market.\nAdditionally, the project involves implementing simple factor models like the Capital Asset Pricing Model (CAPM) and Fama-French models. Through linear regression, I will estimate factor loadings (betas) and excessive returns (alphas), evaluating their statistical properties such as mean, variance, and distribution. I will also test the performance of these linear models using t-statistics and p-values to understand how well the chosen factors explain stock returns linearly. While this project is exploratory and does not include advanced QR applications like portfolio optimization or alpha generation, it serves as a critical step in building the analytical and statistical tools required for such work."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "We picked some stock daily price data from sp500 index."
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\nThe data for this project is sourced from Yahoo Finance, a widely used platform providing comprehensive historical market data for stocks and indices. The dataset includes daily records for multiple assets from the S&P 500 index, with columns such as Date, Open, High, Low, Close, Adjusted Close, and Volume. The primary focus is on the Close price, which will be used to calculate the daily log returns. Log returns are derived by taking the natural logarithm of the ratio of successive closing prices. These returns are central to the analysis as they standardize price changes, making the data scale-independent and additive over time, which simplifies statistical modeling and comparisons. The log return is preferred over simple return because it accounts for compounding effects and ensures symmetry between positive and negative percentage changes, making it ideal for financial data analysis.\n\n\nCode\n# Display the first few rows of the resulting dataframe\nhead(sp500_stock_df)\n\n\n        Date     Open     High      Low    Close    Volume Adjusted Ticker\n1 2013-01-02 19.77929 19.82143 19.34393 19.60821 560518000 16.68734   AAPL\n2 2013-01-03 19.56714 19.63107 19.32143 19.36071 352965200 16.47671   AAPL\n3 2013-01-04 19.17750 19.23679 18.77964 18.82143 594333600 16.01776   AAPL\n4 2013-01-07 18.64286 18.90357 18.40000 18.71071 484156400 15.92353   AAPL\n5 2013-01-08 18.90036 18.99607 18.61607 18.76107 458707200 15.96639   AAPL\n6 2013-01-09 18.66071 18.75036 18.42821 18.46786 407604400 15.71685   AAPL\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Define the tickers of interest\nselected_tickers <- c(\"AAPL\", \"TSLA\", \"NVDA\", \"JNJ\", \"JPM\", \"BRK-B\")\n\n# Filter the dataframe for the selected tickers\nsp500_subset <- sp500_stock_df %>%\n  filter(Ticker %in% selected_tickers)\n\n# Create the line plot\nggplot(sp500_subset, aes(x = Date, y = Adjusted, color = Ticker)) +\n  geom_line() +\n  labs(\n    title = \"Adjusted Close Prices Over Time\",\n    x = \"Date\",\n    y = \"Adjusted Close\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nAlthough an initial glance at raw price data may provide a sense of how various assets evolve over time, such plots are not ideal for comparative analysis. Each asset operates within its own price range, making direct comparisons misleading. To enable a fair evaluation across different assets, we employ measures such as daily returns and cumulative returns. A commonly used definition for the daily return is:\n\\[\n\\text{Daily Return} = \\frac{P_{t} - P_{t-1}}{P_{t-1}}\n\\]\n\n\nCode\ndaily_returns <- function(data) {\n  # Ensure the data is sorted by Date\n  data <- data[order(data$Date), ]\n  \n  # Calculate daily returns using Adjusted prices\n  # diff(data$Adjusted) gives P_t - P_{t-1}, and head(data$Adjusted, -1) gives P_{t-1}\n  returns <- diff(data$Adjusted) / head(data$Adjusted, -1)\n  \n  # Create a new data frame with Date and Return\n  result <- data.frame(\n    Date = data$Date[-1],    # Remove the first date since there's no previous day return\n    Return = returns\n  )\n  \n  return(result)\n}\n\n\n\n\nCode\nAAPL_price <- subset(sp500_stock_df, Ticker == \"AAPL\")\nAAPL_return <- daily_returns((AAPL_price))\nJNJ_price <- subset(sp500_stock_df, Ticker == \"JNJ\")\nJNJ_return <- daily_returns((JNJ_price))\n\n\n\n2.1.1 Problems with visualizing return over time, and the histogram of return\n\n\nCode\nlibrary(patchwork)\n\n# Create AAPL daily returns plot\np1 <- ggplot(AAPL_return, aes(x = Date, y = Return)) +\n  geom_line(color = \"blue\") +\n  labs(\n    title = \"AAPL Daily Returns\",\n    x = \"Date\",\n    y = \"Daily Return\"\n  ) +\n  theme_minimal()\n\n# Create JNJ daily returns plot\np2 <- ggplot(JNJ_return, aes(x = Date, y = Return)) +\n  geom_line(color = \"red\") +\n  labs(\n    title = \"JNJ Daily Returns\",\n    x = \"Date\",\n    y = \"Daily Return\"\n  ) +\n  theme_minimal()\n\n# Display side-by-side\np1 + p2\n\n\n\n\n\n\n\nCode\nmean_aapl <- mean(AAPL_return$Return, na.rm = TRUE)\nsd_aapl <- sd(AAPL_return$Return, na.rm = TRUE)\n\n# Plot for AAPL\np1 <- ggplot(AAPL_return, aes(x = Return)) +\n  geom_histogram(aes(y = ..density..), \n                 binwidth = 0.01, \n                 fill = \"steelblue\", \n                 color = \"white\") +\n  stat_function(fun = dnorm, \n                args = list(mean = mean_aapl, sd = sd_aapl), \n                color = \"red\", \n                size = 1) +\n  labs(\n    title = \"AAPL Daily Returns Distribution\",\n    x = \"Daily Return\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nCode\n# Calculate mean and sd for JNJ returns\nmean_jnj <- mean(JNJ_return$Return, na.rm = TRUE)\nsd_jnj <- sd(JNJ_return$Return, na.rm = TRUE)\n\n# Plot for JNJ\np2 <- ggplot(JNJ_return, aes(x = Return)) +\n  geom_histogram(aes(y = ..density..), \n                 binwidth = 0.01, \n                 fill = \"steelblue\", \n                 color = \"white\") +\n  stat_function(fun = dnorm, \n                args = list(mean = mean_jnj, sd = sd_jnj), \n                color = \"red\", \n                size = 1) +\n  labs(\n    title = \"JNJ Daily Returns Distribution\",\n    x = \"Daily Return\",\n    y = \"Density\"\n  ) +\n  theme_minimal()\n\n# Display both plots side-by-side using patchwork\np1 + p2\n\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\nWill investments on AAPL and JNJ perform similarly over time?\n\n\n2.1.2 But when it compounds…\n\n\nCode\nAAPL_compounding_return <- AAPL_return %>%\n  mutate(Compounding_Return = cumprod(1 + Return)) %>%\n  mutate(Ticker = \"AAPL\")\n\n# Compute compounding returns for JNJ\nJNJ_compounding_return <- JNJ_return %>%\n  mutate(Compounding_Return = cumprod(1 + Return)) %>%\n  mutate(Ticker = \"JNJ\")\n\n# Combine the two\ncombined_compounding_return <- bind_rows(AAPL_compounding_return, JNJ_compounding_return)\n\n# Plot both AAPL and JNJ on the same plot\nggplot(combined_compounding_return, aes(x = Date, y = Compounding_Return, color = Ticker)) +\n  geom_line() +\n  labs(\n    title = \"AAPL and JNJ Compounding Returns Over Time\",\n    x = \"Date\",\n    y = \"Compounding Return\"\n  ) +\n  theme_minimal()"
  },
  {
    "objectID": "data.html#the-limitations-of-simple-plots-for-analyzing-returns",
    "href": "data.html#the-limitations-of-simple-plots-for-analyzing-returns",
    "title": "2  Data",
    "section": "2.2 The Limitations of Simple Plots for Analyzing Returns",
    "text": "2.2 The Limitations of Simple Plots for Analyzing Returns\nThe daily return plot looks like noise, oscillating about 0, and we cannot make anything out of it. The histogram of returns has a mean close to 0 and resembles a normal distribution. However, when we look at the compounding return over time, it clearly goes up and is no longer messy. Why is it so hard to capture information out of the return? It’s due to market efficiency: if the returns were obviously informative, then something would be wrong, because no one in the market is foolish. If the return data showed anything other than noise, it would mean easy profit opportunities, which would quickly vanish as participants exploit them through arbitrage. Unless you engage in high-frequency trading, it’s impossible to take advantage of such fleeting signals. Thus, it is perfectly normal for the returns to look like noise, as it reflects an efficient market."
  },
  {
    "objectID": "data.html#is-return-informative",
    "href": "data.html#is-return-informative",
    "title": "2  Data",
    "section": "2.3 Is return informative?",
    "text": "2.3 Is return informative?\nBut why does the cumulative return plot appear clearer? In the long term, there are still profits to be gained, influenced by industry trends or other large-scale factors. While these factors are hidden within the daily noise, they become evident when returns accumulate. Simply using basic plots like this, however, won’t help us uncover these subtleties. There are many important patterns hidden in the return data, that are not easy to visualize. We need more complex models to make the non visible pattern visible.\n\n\nCode\naapl_stats <- AAPL_return %>%\n  summarize(\n    mean = mean(Return, na.rm = TRUE),\n    q25 = quantile(Return, 0.25, na.rm = TRUE),\n    q50 = quantile(Return, 0.5, na.rm = TRUE),\n    q75 = quantile(Return, 0.75, na.rm = TRUE),\n    sd = sd(Return, na.rm = TRUE)\n  )\n\n# Calculate stats for JNJ\njnj_stats <- JNJ_return %>%\n  summarize(\n    mean = mean(Return, na.rm = TRUE),\n    q25 = quantile(Return, 0.25, na.rm = TRUE),\n    q50 = quantile(Return, 0.5, na.rm = TRUE),\n    q75 = quantile(Return, 0.75, na.rm = TRUE),\n    sd = sd(Return, na.rm = TRUE)\n  )\n\n# Print the stats\ncat(\"AAPL Statistics:\\n\")\n\n\nAAPL Statistics:\n\n\nCode\nprint(aapl_stats)\n\n\n         mean          q25          q50        q75         sd\n1 0.001042554 -0.007387912 0.0008971848 0.01024154 0.01787848\n\n\nCode\ncat(\"\\nJNJ Statistics:\\n\")\n\n\n\nJNJ Statistics:\n\n\nCode\nprint(jnj_stats)\n\n\n          mean          q25          q50         q75         sd\n1 0.0004576926 -0.004636158 0.0004372696 0.005997707 0.01107514\n\n\nCode\n# Combine the data for plotting\ncombined_returns <- rbind(\n  data.frame(Ticker = \"AAPL\", Return = AAPL_return$Return),\n  data.frame(Ticker = \"JNJ\", Return = JNJ_return$Return)\n)\n\n# Boxplot comparison\nggplot(combined_returns, aes(x = Ticker, y = Return, fill = Ticker)) +\n  geom_boxplot() +\n  labs(\n    title = \"Comparison of AAPL and JNJ Daily Returns\",\n    x = \"Ticker\",\n    y = \"Daily Return\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n<<<<<<< HEAD We can still extract some useful information from these results:\n\nAAPL return indeed has a higher mean than JNJ return.\nFrom the boxplot, we can see AAPL is more volatile than JNJ.\n(Is that essentially a good thing?)\n\n\n\nCode\nwrite.csv(sp500_stock_df, \"sp500_stock_df.csv\", row.names = FALSE)\n\n\n======= >>>>>>> add390be3b356c7fed06a29e21fa0c7c2deb8b81"
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.4 Missing value analysis",
    "text": "2.4 Missing value analysis"
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Code\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tibble)\nsp500_stock_df <- read.csv(\"sp500_stock_df.csv\")\nsp500_stock_df$Date <- as.Date(sp500_stock_df$Date)\nff_df <- read.csv(\"F-F_Research_Data_Factors_daily.csv\", skip = 4, header = TRUE)\nWe apply the Fama-French three-factor model to the returns of the selected assets. The model is expressed as:\n\\[\nR_i - R_f = \\alpha + \\beta_1 (R_m - R_f) + \\beta_2 \\text{SMB} + \\beta_3 \\text{HML} + \\epsilon\n\\]\nWhere: - \\(R_i\\): Return of the asset.\nInstead of focusing solely on returns, our analysis emphasizes the \\(\\alpha\\) and the factor loadings \\(\\beta_1, \\beta_2, \\beta_3\\)."
  },
  {
    "objectID": "results.html#observations-on-alpha-distributions",
    "href": "results.html#observations-on-alpha-distributions",
    "title": "3  Results",
    "section": "3.1 Observations on Alpha Distributions",
    "text": "3.1 Observations on Alpha Distributions\n\n\nCode\nlibrary(ggridges)\n\n\nWarning: package 'ggridges' was built under R version 4.2.3\n\n\nCode\nalphas_long <- alphas_long %>%\n  group_by(Stock) %>%\n  mutate(MeanAlpha = mean(Alpha)) %>%\n  ungroup()\n\nggplot(alphas_long, aes(x = Alpha, y = reorder(Stock, MeanAlpha), fill = MeanAlpha)) +\n  geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +\n  scale_fill_gradient(name = \"Mean Alpha\", low = \"blue\", high = \"red\") +\n  labs(\n    title = \"Ridgeline Plot of Alpha Distributions by Stock\",\n    x = \"Alpha\",\n    y = \"Stock\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"top\")\n\n\nPicking joint bandwidth of 0.000231\n\n\n\n\n\n\n3.1.1 Low-Performing Stocks:\n\nThe alpha distributions for low-performing stocks exhibit compact and peaked shapes, with the mean centered around zero.\nThis indicates that these stocks consistently achieve alpha values near zero, aligning closely with the efficient market hypothesis. In an efficient market, these stocks do not present persistent opportunities for abnormal returns.\n\n\n\n3.1.2 High-Performing Stocks:\n\nThe alpha distributions for high-performing stocks display very fat tails and lack a distinct peak, resulting in a flat and widespread shape.\nThese stocks exhibit significantly higher mean alphas, indicating periods of consistent outperformance of the efficient market.\nHowever, their alpha is highly unstable, often reverting as market participants exploit the opportunities.\nDespite this reversion, these stocks tend to outperform again, suggesting that their alpha does not stabilize around a single value for long.\n\n\n\nCode\nwrite.csv(alphas_df, \"alpha_df.csv\", row.names = FALSE)"
  }
]