y = "Rolling Mean"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Display the faceted scatter plots
print(faceted_plot)
beta1_df$Date <- as.Date(beta1_df$Date, format = "%Y-%m-%d")
merged_df <- rolling_mean_df |>
inner_join(beta1_df, by = "Date", suffix = c("_mean", "_beta1"))
# View the first few rows of the merged data frame
head(merged_df)
long_df <- merged_df |>
pivot_longer(
cols = -Date,                # Exclude the Date column
names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
names_sep = "_",             # Separator between Stock and Metric
values_to = "Value"          # Name of the new value column
) |>
pivot_wider(
names_from = "Metric",       # Spread Metric into separate columns
values_from = "Value"        # Populate with corresponding values
)
beta1_df$Date <- as.Date(beta1_df$Date, format = "%Y-%m-%d")
merged_df <- rolling_mean_df |>
inner_join(beta1_df, by = "Date", suffix = c("_mean", "_beta1"))
long_df <- merged_df |>
pivot_longer(
cols = -Date,                # Exclude the Date column
names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
names_sep = "_",             # Separator between Stock and Metric
values_to = "Value"          # Name of the new value column
) |>
pivot_wider(
names_from = "Metric",       # Spread Metric into separate columns
values_from = "Value"        # Populate with corresponding values
)
clean_long_df <- long_df |>
drop_na(mean, beta1)
#interactive plot with plotly
interactive_scatter <- clean_long_df |>
ggplot(aes(x = beta1, y = mean, color = Stock, text = paste("Stock:", Stock))) +
geom_point(alpha = 0.6) +
labs(
title = "Rolling Beta1 vs Rolling Mean for Each Stock",
x = "Rolling Beta1",
y = "Rolling Mean",
color = "Stock"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Convert to an interactive plotly object
interactive_plotly <- interactive_scatter |>
ggplotly(tooltip = c("x", "y", "color", "text"))
# Display the interactive plot
interactive_plotly
beta1_df$Date <- as.Date(beta1_df$Date, format = "%Y-%m-%d")
merged_df <- rolling_mean_df |>
inner_join(beta1_df, by = "Date", suffix = c("_mean", "_beta1"))
long_df <- merged_df |>
pivot_longer(
cols = -Date,                # Exclude the Date column
names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
names_sep = "_",             # Separator between Stock and Metric
values_to = "Value"          # Name of the new value column
) |>
pivot_wider(
names_from = "Metric",       # Spread Metric into separate columns
values_from = "Value"        # Populate with corresponding values
)
clean_long_df <- long_df |>
drop_na(mean, beta1)
#interactive plot with plotly
interactive_scatter <- clean_long_df |>
ggplot(aes(x = beta1, y = mean, color = Stock, text = paste("Stock:", Stock))) +
geom_point(alpha = 0.6) +
labs(
title = "Rolling Beta1 vs Rolling Mean for Each Stock",
x = "Rolling Beta1",
y = "Rolling Mean",
color = "Stock"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Convert to an interactive plotly object
interactive_plotly <- interactive_scatter |>
ggplotly(tooltip = c("x", "y", "color", "text"))
# Display the interactive plot
interactive_plotly
beta1_long <- beta1_df %>%
pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta1")
ggplot(beta1_long, aes(x = as.Date(Date), y = beta1, color = Stock)) +
geom_line(size = 1) +  # Use lines for trends
labs(
title = "Beta1 Over Time",
x = "Date",
y = "beta1",
color = "Stock"
) +
theme_minimal() +  # Apply a clean theme
theme(legend.position = "top")
beta1_long <- beta1_long %>%
group_by(Stock) %>%
mutate(MeanBeta1 = mean(beta1)) %>%
ungroup()
ggplot(beta1_long, aes(x = beta1, y = reorder(Stock, MeanBeta1), fill = MeanBeta1)) +
geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
scale_fill_gradient(name = "Mean Beta1", low = "blue", high = "red") +
labs(
title = "Ridgeline Plot of Beta1 Distributions by Stock",
x = "Beta",
y = "Stock"
) +
theme_minimal() +
theme(legend.position = "top")
# Create faceted scatter plots, one for each stock
faceted_plot <- clean_long_df |>
ggplot(aes(x = beta1, y = mean)) +
geom_point(color = "steelblue", alpha = 0.6) +
facet_wrap(~ Stock, scales = "free") +
labs(
title = "Rolling Beta vs Rolling Mean per Stock",
x = "Rolling Beta1",
y = "Rolling Mean"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Display the faceted scatter plots
print(faceted_plot)
# Create faceted scatter plots, one for each stock
faceted_plot <- clean_long_df |>
ggplot(aes(x = beta1, y = mean)) +
geom_point(color = "steelblue", alpha = 0.6) +
facet_wrap(~ Stock, scales = "free") +
labs(
title = "Rolling Beta1 vs Rolling Mean per Stock",
x = "Rolling Beta1",
y = "Rolling Mean"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Display the faceted scatter plots
print(faceted_plot)
knitr::opts_chunk$set(warning = FALSE)
library(dplyr)
library(tibble)
library(tidyr)
sp500_stock_df <- read.csv("sp500_stock_df.csv")
sp500_stock_df$Date <- as.Date(sp500_stock_df$Date)
ff_df <- read.csv("F-F_Research_Data_Factors_daily.csv", skip = 4, header = TRUE)
ff_df <- ff_df %>% mutate(across(where(is.numeric), ~ . / 100))
ff_df$X <- as.Date(ff_df$X, format = "%Y%m%d")
colnames(ff_df)[colnames(ff_df) == "X"] <- "Date"
adjusted_close <- sp500_stock_df %>%
select(Date, Adjusted, Ticker) %>%  # Keep only necessary columns
pivot_wider(names_from = Ticker, values_from = Adjusted)
returns <- adjusted_close %>%
mutate(across(where(is.numeric), ~ c(NA, diff(.) / lag(.)[-1]))) %>%
filter(complete.cases(.))
excess_returns <- returns %>%
left_join(ff_df, by = "Date") %>%  # Merge by Date
mutate(across(
.cols = setdiff(names(.), c("Date", "RF")),  # Select all columns except "Date" and "RF"
.fns = ~ . - RF
)) %>%
select(-Mkt.RF, -SMB, -HML, -RF)
ff3 <- ff_df %>%
select(-RF) %>%
filter(Date %in% excess_returns$Date)
excess_returns_df <- as.data.frame(excess_returns)
# Convert Date column to proper Date type if needed
excess_returns_df$Date <- as.Date(excess_returns_df$Date)
# Set the Date column as row names
rownames(excess_returns_df) <- as.character(excess_returns_df$Date)
# Remove the Date column
excess_returns_df$Date <- NULL
rownames(ff3) <- ff3$Date
ff3$Date <- NULL
rolling_ff3_coefficients <- function(returns, ff3_factors, window_size = 252, check_interval = 21) {
# Check that returns and ff3_factors have the same number of rows
if (nrow(returns) != nrow(ff3_factors)) {
stop("returns and ff3_factors must have the same number of rows.")
}
n <- nrow(returns)
stock_names <- colnames(returns)
factor_names <- colnames(ff3_factors)
# Initialize lists to store rolling results
rolling_alpha <- list()
rolling_betas <- vector("list", 3) # For 3 factors
names(rolling_betas) <- paste0("beta_", 1:3)
# Prepare empty slots for each stock
for (stock in stock_names) {
rolling_alpha[[stock]] <- numeric(0)
for (beta_key in names(rolling_betas)) {
rolling_betas[[beta_key]][[stock]] <- numeric(0)
}
}
rolling_dates <- character(0)
# Iterate over rolling windows
for (i in seq(window_size, n, by = check_interval)) {
start_idx <- i - window_size + 1
end_idx <- i
returns_window <- returns[start_idx:end_idx, , drop = FALSE]
factors_window <- ff3_factors[start_idx:end_idx, , drop = FALSE]
# Construct the model formula: y ~ MKT_RF + SMB + HML
model_formula <- as.formula(paste("y ~", paste(factor_names, collapse = " + ")))
for (stock in stock_names) {
y <- returns_window[[stock]]
data_for_reg <- cbind(y = y, factors_window)
# Fit the linear model
model <- lm(model_formula, data = data_for_reg)
coefs <- coef(model)
# Store alpha and betas
rolling_alpha[[stock]] <- c(rolling_alpha[[stock]], coefs[1]) # alpha (intercept)
for (j in 1:3) {
rolling_betas[[paste0("beta_", j)]][[stock]] <- c(rolling_betas[[paste0("beta_", j)]][[stock]], coefs[j+1])
}
}
# Record the date of the last observation in the window
rolling_dates <- c(rolling_dates, rownames(returns)[end_idx])
}
# Convert lists to data frames
df_alpha <- as.data.frame(rolling_alpha, row.names = rolling_dates)
df_betas <- lapply(rolling_betas, function(x) as.data.frame(x, row.names = rolling_dates))
# Return a list with alpha and each beta DataFrame
return(list(
alpha = df_alpha,
beta_1 = df_betas[["beta_1"]],
beta_2 = df_betas[["beta_2"]],
beta_3 = df_betas[["beta_3"]]
))
}
factor_loadings <- rolling_ff3_coefficients(excess_returns_df, ff3, window_size = 630)
alphas_df <- factor_loadings$alpha %>%
rownames_to_column(var = "Date")
beta1_df <- factor_loadings$beta_1 %>%
rownames_to_column(var = "Date")
beta2_df <- factor_loadings$beta_2 %>%
rownames_to_column(var = "Date")
beta3_df <- factor_loadings$beta_3 %>%
rownames_to_column(var = "Date")
library(ggplot2)
library(ggridges)
alphas_long <- alphas_df %>%
pivot_longer(cols = -Date, names_to = "Stock", values_to = "Alpha")
ggplot(alphas_long, aes(x = as.Date(Date), y = Alpha, color = Stock)) +
geom_line(size = 1) +  # Use lines for trends
labs(
title = "Alphas Over Time",
x = "Date",
y = "Alpha",
color = "Stock"
) +
theme_minimal() +  # Apply a clean theme
theme(legend.position = "top")
alphas_long <- alphas_long %>%
group_by(Stock) %>%
mutate(MeanAlpha = mean(Alpha)) %>%
ungroup()
ggplot(alphas_long, aes(x = Alpha, y = reorder(Stock, MeanAlpha), fill = MeanAlpha)) +
geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
scale_fill_gradient(name = "Mean Alpha", low = "blue", high = "red") +
labs(
title = "Ridgeline Plot of Alpha Distributions by Stock",
x = "Alpha",
y = "Stock"
) +
theme_minimal() +
theme(legend.position = "top")
beta1_long <- beta1_df %>%
pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta1")
ggplot(beta1_long, aes(x = as.Date(Date), y = beta1, color = Stock)) +
geom_line(size = 1) +  # Use lines for trends
labs(
title = "Beta1 Over Time",
x = "Date",
y = "beta1",
color = "Stock"
) +
theme_minimal() +  # Apply a clean theme
theme(legend.position = "top")
beta1_long <- beta1_long %>%
group_by(Stock) %>%
mutate(MeanBeta1 = mean(beta1)) %>%
ungroup()
ggplot(beta1_long, aes(x = beta1, y = reorder(Stock, MeanBeta1), fill = MeanBeta1)) +
geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
scale_fill_gradient(name = "Mean Beta1", low = "blue", high = "red") +
labs(
title = "Ridgeline Plot of Beta1 Distributions by Stock",
x = "Beta",
y = "Stock"
) +
theme_minimal() +
theme(legend.position = "top")
beta2_long <- beta2_df %>%
pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta2")
ggplot(beta2_long, aes(x = as.Date(Date), y = beta2, color = Stock)) +
geom_line(size = 1) +  # Use lines for trends
labs(
title = "Beta2 Over Time",
x = "Date",
y = "beta2",
color = "Stock"
) +
theme_minimal() +  # Apply a clean theme
theme(legend.position = "top")
beta2_long <- beta2_long %>%
group_by(Stock) %>%
mutate(MeanBeta2 = mean(beta2)) %>%
ungroup()
ggplot(beta2_long, aes(x = beta2, y = reorder(Stock, MeanBeta2), fill = MeanBeta2)) +
geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
scale_fill_gradient(name = "Mean Beta2", low = "blue", high = "red") +
labs(
title = "Ridgeline Plot of Beta2 Distributions by Stock",
x = "Beta2",
y = "Stock"
) +
theme_minimal() +
theme(legend.position = "top")
beta3_long <- beta3_df %>%
pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta3")
ggplot(beta3_long, aes(x = as.Date(Date), y = beta3, color = Stock)) +
geom_line(size = 1) +  # Use lines for trends
labs(
title = "Beta3 Over Time",
x = "Date",
y = "beta3",
color = "Stock"
) +
theme_minimal() +  # Apply a clean theme
theme(legend.position = "top")
beta3_long <- beta3_long %>%
group_by(Stock) %>%
mutate(MeanBeta3 = mean(beta3)) %>%
ungroup()
ggplot(beta3_long, aes(x = beta3, y = reorder(Stock, MeanBeta3), fill = MeanBeta3)) +
geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
scale_fill_gradient(name = "Mean Beta3", low = "blue", high = "red") +
labs(
title = "Ridgeline Plot of Beta3 Distributions by Stock",
x = "Beta3",
y = "Stock"
) +
theme_minimal() +
theme(legend.position = "top")
alphas_median <- apply(alphas_df[-1], 2, median)
beta1_median <- apply(beta1_df[-1], 2, median)
beta2_median <- apply(beta2_df[-1], 2, median)
beta3_median <- apply(beta3_df[-1], 2, median)
loading_df <- data.frame(
stock = names(alphas_median),
alpha = alphas_median,
beta1 = beta1_median,
beta2 = beta2_median,
beta3 = beta3_median
)
library(GGally)
# Create the parallel coordinate plot
ggparcoord(
data = loading_df,
columns = 2:5,       # Select columns for parallel coordinates (alpha, beta1, beta2, beta3)
groupColumn = 1,     # Use the stock column for grouping lines
scale = "uniminmax"  # Scale the data to [0, 1] for better visualization
) +
labs(
title = "Parallel Coordinate Plot for Stock Factor Loadings",
x = "Factors",
y = "Scaled Values",
color = "Stock"
) +
theme_minimal()
library(zoo)
# Set parameters
window_size <- 630
update_interval <- 21
rownames_to_column <- function(x, var = "Date") {
x <- cbind(rowname = rownames(x), x)
rownames(x) <- NULL
colnames(x)[1] <- var
return(x)
}
excess_returns_df <- rownames_to_column(excess_returns_df)
excess_returns_df$Date <- as.Date(excess_returns_df$Date, format = "%Y-%m-%d")
excess_zoo <- zoo(excess_returns_df[,-1], order.by = excess_returns_df$Date)
# Calculate rolling means with window size 630 and update interval 21
rolling_mean <- rollapply(
data = excess_zoo,
width = 630,
by = 21,
FUN = mean,
align = "right",
na.rm = TRUE,
fill = NA  # Fills incomplete windows with NA
)
# Convert the rolling mean back to a data frame
rolling_mean_df <- fortify.zoo(rolling_mean)
# Rename the first column to Date
names(rolling_mean_df)[1] <- "Date"
# Remove rows with NA values
rolling_mean_df <- na.omit(rolling_mean_df)
alphas_df$Date <- as.Date(alphas_df$Date, format = "%Y-%m-%d")
merged_df <- rolling_mean_df |>
inner_join(alphas_df, by = "Date", suffix = c("_mean", "_alpha"))
long_df <- merged_df |>
pivot_longer(
cols = -Date,                # Exclude the Date column
names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
names_sep = "_",             # Separator between Stock and Metric
values_to = "Value"          # Name of the new value column
) |>
pivot_wider(
names_from = "Metric",       # Spread Metric into separate columns
values_from = "Value"        # Populate with corresponding values
)
clean_long_df <- long_df |>
drop_na(mean, alpha)
#interactive plot with plotly
interactive_scatter <- clean_long_df |>
ggplot(aes(x = alpha, y = mean, color = Stock, text = paste("Stock:", Stock))) +
geom_point(alpha = 0.6) +
labs(
title = "Rolling Alpha vs Rolling Mean for Each Stock",
x = "Rolling Alpha",
y = "Rolling Mean",
color = "Stock"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Convert to an interactive plotly object
interactive_plotly <- interactive_scatter |>
ggplotly(tooltip = c("x", "y", "color", "text"))
# Display the interactive plot
interactive_plotly
# Create faceted scatter plots, one for each stock
faceted_plot <- clean_long_df |>
ggplot(aes(x = alpha, y = mean)) +
geom_point(color = "steelblue", alpha = 0.6) +
facet_wrap(~ Stock, scales = "free") +
labs(
title = "Rolling Alpha vs Rolling Mean per Stock",
x = "Rolling Alpha",
y = "Rolling Mean"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Display the faceted scatter plots
print(faceted_plot)
beta1_df$Date <- as.Date(beta1_df$Date, format = "%Y-%m-%d")
merged_df <- rolling_mean_df |>
inner_join(beta1_df, by = "Date", suffix = c("_mean", "_beta1"))
long_df <- merged_df |>
pivot_longer(
cols = -Date,                # Exclude the Date column
names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
names_sep = "_",             # Separator between Stock and Metric
values_to = "Value"          # Name of the new value column
) |>
pivot_wider(
names_from = "Metric",       # Spread Metric into separate columns
values_from = "Value"        # Populate with corresponding values
)
clean_long_df <- long_df |>
drop_na(mean, beta1)
#interactive plot with plotly
interactive_scatter <- clean_long_df |>
ggplot(aes(x = beta1, y = mean, color = Stock, text = paste("Stock:", Stock))) +
geom_point(alpha = 0.6) +
labs(
title = "Rolling Beta1 vs Rolling Mean for Each Stock",
x = "Rolling Beta1",
y = "Rolling Mean",
color = "Stock"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Convert to an interactive plotly object
interactive_plotly <- interactive_scatter |>
ggplotly(tooltip = c("x", "y", "color", "text"))
# Display the interactive plot
interactive_plotly
faceted_plot <- clean_long_df |>
ggplot(aes(x = beta1, y = mean)) +
geom_point(color = "steelblue", alpha = 0.6) +
facet_wrap(~ Stock, scales = "free") +
labs(
title = "Rolling Beta1 vs Rolling Mean per Stock",
x = "Rolling Beta1",
y = "Rolling Mean"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5)
)
# Display the faceted scatter plots
print(faceted_plot)
