# Results

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE)
```

## The Fama-French Factor Model

We apply the Fama-French three-factor model to the returns of the selected assets. The model is expressed as:

$$ 
R_i - R_f = \alpha + \beta_1 (R_m - R_f) + \beta_2 \text{SMB} + \beta_3 \text{HML} + \epsilon 
$$

Where:
- $R_i$: Return of the asset.

- $R_f$: Risk-free rate.

- $R_m$: Market return.

- $\text{SMB}$: Small-minus-Big factor, representing the size effect.

- $\text{HML}$: High-minus-Low factor, representing the value effect.

- $\alpha$: Intercept (alpha).

- $\beta_1$, $\beta_2$, $\beta_3$: Factor loadings.

- $\epsilon$: Residual error term.

Instead of focusing solely on returns, our analysis emphasizes the $\alpha$ and the factor loadings $\beta_1, \beta_2, \beta_3$.


The Fama-French three-factor model is a widely used framework in asset pricing that expands on the traditional CAPM by incorporating size and value factors to better explain stock returns. This model adds the Small-Minus-Big (SMB) factor, capturing the size effect, and the High-Minus-Low (HML) factor, representing the value effect, alongside the market risk premium. By including these additional dimensions, the Fama-French model accounts for systematic patterns in asset returns linked to company size and valuation. In this analysis, the focus lies on estimating the intercept (alpha) and factor loadings ($\beta_1$, $\beta_2$, $\beta_3$) to understand the relationship between asset returns and these underlying factors.

**How we apply the Fama-French Model**

We get the factor loadings ($\alpha$ and the $\beta$s) by linear regression. However, return data is a time series. To fit a linear model on time series, we must always be cautious because the data might evolve through time. That means, "the more data, the better" does not apply to our linear model here. Instead we pick the data from a rolling window, say, the last 30 month, and fit the linear model. We then update the linear model every month. Eventually we get a series of linear model and factor loadings. We then can evaluate the factor loadings not only by its mean, but also the distribution and consistency. We can also study how the factor loadings change through time, or the correlation between factor loadings, or across different assets. 


```{r}
library(dplyr)
library(tibble)
library(tidyr)
sp500_stock_df <- read.csv("sp500_stock_df.csv")
sp500_stock_df$Date <- as.Date(sp500_stock_df$Date)
ff_df <- read.csv("F-F_Research_Data_Factors_daily.csv", skip = 4, header = TRUE)
ff_df <- ff_df %>% mutate(across(where(is.numeric), ~ . / 100))
ff_df$X <- as.Date(ff_df$X, format = "%Y%m%d")
colnames(ff_df)[colnames(ff_df) == "X"] <- "Date"

adjusted_close <- sp500_stock_df %>%
  select(Date, Adjusted, Ticker) %>%  # Keep only necessary columns
  pivot_wider(names_from = Ticker, values_from = Adjusted)

returns <- adjusted_close %>%
  mutate(across(where(is.numeric), ~ c(NA, diff(.) / lag(.)[-1]))) %>%
  filter(complete.cases(.))

excess_returns <- returns %>%
  left_join(ff_df, by = "Date") %>%  # Merge by Date
  mutate(across(
    .cols = setdiff(names(.), c("Date", "RF")),  # Select all columns except "Date" and "RF"
    .fns = ~ . - RF
  )) %>%
  select(-Mkt.RF, -SMB, -HML, -RF)

ff3 <- ff_df %>%
  select(-RF) %>% 
  filter(Date %in% excess_returns$Date)  

excess_returns_df <- as.data.frame(excess_returns)
# Convert Date column to proper Date type if needed
excess_returns_df$Date <- as.Date(excess_returns_df$Date)
# Set the Date column as row names
rownames(excess_returns_df) <- as.character(excess_returns_df$Date)
# Remove the Date column
excess_returns_df$Date <- NULL

rownames(ff3) <- ff3$Date
ff3$Date <- NULL
```



```{r}
rolling_ff3_coefficients <- function(returns, ff3_factors, window_size = 252, check_interval = 21) {
  # Check that returns and ff3_factors have the same number of rows
  if (nrow(returns) != nrow(ff3_factors)) {
    stop("returns and ff3_factors must have the same number of rows.")
  }
  
  n <- nrow(returns)
  stock_names <- colnames(returns)
  factor_names <- colnames(ff3_factors)
  
  # Initialize lists to store rolling results
  rolling_alpha <- list()
  rolling_betas <- vector("list", 3) # For 3 factors
  names(rolling_betas) <- paste0("beta_", 1:3)
  
  # Prepare empty slots for each stock
  for (stock in stock_names) {
    rolling_alpha[[stock]] <- numeric(0)
    for (beta_key in names(rolling_betas)) {
      rolling_betas[[beta_key]][[stock]] <- numeric(0)
    }
  }
  
  rolling_dates <- character(0)
  
  # Iterate over rolling windows
  for (i in seq(window_size, n, by = check_interval)) {
    start_idx <- i - window_size + 1
    end_idx <- i
    
    returns_window <- returns[start_idx:end_idx, , drop = FALSE]
    factors_window <- ff3_factors[start_idx:end_idx, , drop = FALSE]
    
    # Construct the model formula: y ~ MKT_RF + SMB + HML
    model_formula <- as.formula(paste("y ~", paste(factor_names, collapse = " + ")))
    
    for (stock in stock_names) {
      y <- returns_window[[stock]]
      data_for_reg <- cbind(y = y, factors_window)
      
      # Fit the linear model
      model <- lm(model_formula, data = data_for_reg)
      coefs <- coef(model)
      
      # Store alpha and betas
      rolling_alpha[[stock]] <- c(rolling_alpha[[stock]], coefs[1]) # alpha (intercept)
      for (j in 1:3) {
        rolling_betas[[paste0("beta_", j)]][[stock]] <- c(rolling_betas[[paste0("beta_", j)]][[stock]], coefs[j+1])
      }
    }
    
    # Record the date of the last observation in the window
    rolling_dates <- c(rolling_dates, rownames(returns)[end_idx])
  }
  
  # Convert lists to data frames
  df_alpha <- as.data.frame(rolling_alpha, row.names = rolling_dates)
  df_betas <- lapply(rolling_betas, function(x) as.data.frame(x, row.names = rolling_dates))
  
  # Return a list with alpha and each beta DataFrame
  return(list(
    alpha = df_alpha,
    beta_1 = df_betas[["beta_1"]],
    beta_2 = df_betas[["beta_2"]],
    beta_3 = df_betas[["beta_3"]]
  ))
}
```



```{r}
factor_loadings <- rolling_ff3_coefficients(excess_returns_df, ff3, window_size = 630)

alphas_df <- factor_loadings$alpha %>%
  rownames_to_column(var = "Date")
 
beta1_df <- factor_loadings$beta_1 %>%
  rownames_to_column(var = "Date")

beta2_df <- factor_loadings$beta_2 %>%
  rownames_to_column(var = "Date")

beta3_df <- factor_loadings$beta_3 %>%
  rownames_to_column(var = "Date")
```

### Observations on Alpha Distributions

Alpha measures an investment's excess return over a benchmark -- the market or factor-based expectations. In models like Fama-French, it captures the portion of returns unexplained by factors such as market risk or size. In reality, alpha often reverts to zero as market inefficiencies are corrected, making it hard to find and sustain a constantly positive alpha. Investors aim for consistent, positive alpha as a source of stable excess return.

```{r}
library(ggplot2)
library(ggridges)
alphas_long <- alphas_df %>%
  pivot_longer(cols = -Date, names_to = "Stock", values_to = "Alpha")

ggplot(alphas_long, aes(x = as.Date(Date), y = Alpha, color = Stock)) +
  geom_line(size = 1) +  # Use lines for trends
  labs(
    title = "Alphas Over Time",
    x = "Date",
    y = "Alpha",
    color = "Stock"
  ) +
  theme_minimal() +  # Apply a clean theme
  theme(legend.position = "top")

alphas_long <- alphas_long %>%
  group_by(Stock) %>%
  mutate(MeanAlpha = mean(Alpha)) %>%
  ungroup()

ggplot(alphas_long, aes(x = Alpha, y = reorder(Stock, MeanAlpha), fill = MeanAlpha)) +
  geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
  scale_fill_gradient(name = "Mean Alpha", low = "blue", high = "red") +
  labs(
    title = "Ridgeline Plot of Alpha Distributions by Stock",
    x = "Alpha",
    y = "Stock"
  ) +
  theme_minimal() +
  theme(legend.position = "top")

```

Most alphas fluctuate around zero. 

#### Stocks with no excess return: PG, BRK.B, JNJ, KO, PFE
- The alpha distributions for these low-performing stocks exhibit compact and peaked shapes, with the mean centered around zero. 

- This indicates that these stocks consistently achieve alpha values near zero, aligning closely with the efficient market hypothesis. In an efficient market, these stocks do not present persistent opportunities for abnormal returns.

#### Stocks with stable positive excess return: AAPL, MSFT, HD, GOOGL, JPM, V
- These high-performing stocks have a consistently positive alpha, the distribution is less compact, but still has a peak. 

- This indicates that these stocks consistently outperform the Fama-French Factor Model, with a constant excess return. The excess return is unexplained by Market Return, SMB and HML. We might be able to explain the excess return by introducing new factors. 

- Long-term investment on these stocks will yield a positive excess return over Fama-French Factors. 

#### Stocks with very unstable positive excess return: NVDA, TSLA, NFLX, AMZN 
- The alpha distributions for high-performing stocks display very fat tails and lack a distinct peak, resulting in a flat and widespread shape.

- These stocks exhibit significantly higher mean alphas, indicating periods of consistent outperformance of the efficient market.  However, the flat distribution curve suggests that their alpha is highly unstable, and does not stabilize around a single value for long. Once the excess return appear, it will soon be exploited by market players, but the excess return often reappear shortly. 

- These stocks are uprising assets with great potentials and risks at the same time. The profit could be very large over a short period of time, but it is unpredictable. 


### Observations on the Distributions of exposure to Market Risk

$\beta_1$ in the Fama-French model represents the factor loading for market risk, measuring how sensitive an asset is to overall market movements. A $\beta_1 > 1$ indicates that the asset is more volatile than the market, while $\beta_1 < 1$ suggests it is less sensitive to market changes. It evaluates the portion of an asset's returns driven by systematic market risk, making it crucial for understanding exposure to broad economic trends. Investors rely on $\beta_1$ to assess the asset's alignment with market performance and its role in portfolio risk management. 

Although it often appears to be so, a high $\beta_1$ does not essentially mean a good sign. Because high volatility also brings more risk, causing significant loss when the market is going down. when the market is going upward, it is usually preferred to invest on assets with higher exposure to market risk. 

```{r}
beta1_long <- beta1_df %>%
  pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta1")

ggplot(beta1_long, aes(x = as.Date(Date), y = beta1, color = Stock)) +
  geom_line(size = 1) +  # Use lines for trends
  labs(
    title = "Beta1 Over Time",
    x = "Date",
    y = "beta1",
    color = "Stock"
  ) +
  theme_minimal() +  # Apply a clean theme
  theme(legend.position = "top")

beta1_long <- beta1_long %>%
  group_by(Stock) %>%
  mutate(MeanBeta1 = mean(beta1)) %>%
  ungroup()

ggplot(beta1_long, aes(x = beta1, y = reorder(Stock, MeanBeta1), fill = MeanBeta1)) +
  geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
  scale_fill_gradient(name = "Mean Beta1", low = "blue", high = "red") +
  labs(
    title = "Ridgeline Plot of Beta1 Distributions by Stock",
    x = "Beta",
    y = "Stock"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```

#### Stocks with high exposure to Market Risk: NVDA, TSLA, NFLX, MSFT, JPM, AMZN, AAPL, GOOGL, etc.
Stocks that have a high $\beta_1$, reflecting significant sensitivity to market movements. These stocks often belong to technology, growth, or finance sectors, which are more volatile and influenced by broad economic trends.

#### Stocks with low exposure to Market Risk: BRK.B, UNH, XOM, JNJ, KO, PG, etc.
Stocks that have a low $\beta_1$, indicating less sensitivity to market movements. These companies are often in stable industries such as consumer staples, healthcare, or energy, providing consistent performance regardless of market volatility.

**Second Thoughts**
The top assets selected by $\beta_1$ are also those with high $alpha$ and return. Does it mean that $\beta_1$ is a good indicator for selecting high return assets? (Will be verified in the last section)

### Observations on the Distributions of exposure to SMB and HML

Due to the length of the project, the effects of the $\beta_2$ and $\beta_3$ will not be discussed here. The plots of the factor loadings by stocks are shown below. We can notice that the coefficient of SMB and coefficient of HML seem to be negatively correlated. This is because small-cap stocks (high SMB) often exhibit growth characteristics (low HML), while large-cap stocks (low SMB) tend to align with value characteristics (high HML).


```{r}
beta2_long <- beta2_df %>%
  pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta2")

ggplot(beta2_long, aes(x = as.Date(Date), y = beta2, color = Stock)) +
  geom_line(size = 1) +  # Use lines for trends
  labs(
    title = "Beta2 Over Time",
    x = "Date",
    y = "beta2",
    color = "Stock"
  ) +
  theme_minimal() +  # Apply a clean theme
  theme(legend.position = "top")

beta2_long <- beta2_long %>%
  group_by(Stock) %>%
  mutate(MeanBeta2 = mean(beta2)) %>%
  ungroup()

ggplot(beta2_long, aes(x = beta2, y = reorder(Stock, MeanBeta2), fill = MeanBeta2)) +
  geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
  scale_fill_gradient(name = "Mean Beta2", low = "blue", high = "red") +
  labs(
    title = "Ridgeline Plot of Beta2 Distributions by Stock",
    x = "Beta2",
    y = "Stock"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```


```{r}
beta3_long <- beta3_df %>%
  pivot_longer(cols = -Date, names_to = "Stock", values_to = "beta3")

ggplot(beta3_long, aes(x = as.Date(Date), y = beta3, color = Stock)) +
  geom_line(size = 1) +  # Use lines for trends
  labs(
    title = "Beta3 Over Time",
    x = "Date",
    y = "beta3",
    color = "Stock"
  ) +
  theme_minimal() +  # Apply a clean theme
  theme(legend.position = "top")

beta3_long <- beta3_long %>%
  group_by(Stock) %>%
  mutate(MeanBeta3 = mean(beta3)) %>%
  ungroup()

ggplot(beta3_long, aes(x = beta3, y = reorder(Stock, MeanBeta3), fill = MeanBeta3)) +
  geom_density_ridges(scale = 1.5, rel_min_height = 0.01) +
  scale_fill_gradient(name = "Mean Beta3", low = "blue", high = "red") +
  labs(
    title = "Ridgeline Plot of Beta3 Distributions by Stock",
    x = "Beta3",
    y = "Stock"
  ) +
  theme_minimal() +
  theme(legend.position = "top")
```


### Relationship between Factor Loadings

As we can see more clearly in the parallel coordinate plot, the seemingly positive relation between $\alpha$ and $\beta_1$ is not very strong. We can only say with confidence that $\beta_2$ and $\beta_3$ are indeed negatively correlated.

```{r, warning=FALSE}
alphas_median <- apply(alphas_df[-1], 2, median)
beta1_median <- apply(beta1_df[-1], 2, median)
beta2_median <- apply(beta2_df[-1], 2, median)
beta3_median <- apply(beta3_df[-1], 2, median)

loading_df <- data.frame(
  stock = names(alphas_median),
  alpha = alphas_median,
  beta1 = beta1_median,
  beta2 = beta2_median,
  beta3 = beta3_median
)

library(GGally)

# Create the parallel coordinate plot
ggparcoord(
  data = loading_df,
  columns = 2:5,       # Select columns for parallel coordinates (alpha, beta1, beta2, beta3)
  groupColumn = 1,     # Use the stock column for grouping lines
  scale = "uniminmax"  # Scale the data to [0, 1] for better visualization
) +
  labs(
    title = "Parallel Coordinate Plot for Stock Factor Loadings",
    x = "Factors",
    y = "Scaled Values",
    color = "Stock"
  ) +
  theme_minimal()
```

### Alpha and Return

Finally, we analyze how well $\alpha$ can reflect the return accordingly. That is, we want to find out: is the alpha generated by Fama-French model a good indicator for investment?

```{r, warning=FALSE}
library(zoo)
library(plotly)
# Set parameters
window_size <- 630
update_interval <- 21

rownames_to_column <- function(x, var = "Date") {
  x <- cbind(rowname = rownames(x), x)
  rownames(x) <- NULL
  colnames(x)[1] <- var
  return(x)
}

excess_returns_df <- rownames_to_column(excess_returns_df)
excess_returns_df$Date <- as.Date(excess_returns_df$Date, format = "%Y-%m-%d")


excess_zoo <- zoo(excess_returns_df[,-1], order.by = excess_returns_df$Date)

# Calculate rolling means with window size 630 and update interval 21
rolling_mean <- rollapply(
  data = excess_zoo,
  width = 630,
  by = 21,
  FUN = mean,
  align = "right",
  na.rm = TRUE,
  fill = NA  # Fills incomplete windows with NA
)

# Convert the rolling mean back to a data frame
rolling_mean_df <- fortify.zoo(rolling_mean)

# Rename the first column to Date
names(rolling_mean_df)[1] <- "Date"

# Remove rows with NA values
rolling_mean_df <- na.omit(rolling_mean_df)


alphas_df$Date <- as.Date(alphas_df$Date, format = "%Y-%m-%d")


merged_df <- rolling_mean_df |>
  inner_join(alphas_df, by = "Date", suffix = c("_mean", "_alpha"))



long_df <- merged_df |>
  pivot_longer(
    cols = -Date,                # Exclude the Date column
    names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
    names_sep = "_",             # Separator between Stock and Metric
    values_to = "Value"          # Name of the new value column
  ) |>
  pivot_wider(
    names_from = "Metric",       # Spread Metric into separate columns
    values_from = "Value"        # Populate with corresponding values
  )

```
```{r, warning=FALSE}
clean_long_df <- long_df |>
  drop_na(mean, alpha)

#interactive plot with plotly
interactive_scatter <- clean_long_df |>
  ggplot(aes(x = alpha, y = mean, color = Stock, text = paste("Stock:", Stock))) +
  geom_point(alpha = 0.6) +
  labs(
    title = "Rolling Alpha vs Rolling Mean for Each Stock",
    x = "Rolling Alpha",
    y = "Rolling Mean",
    color = "Stock"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  )

# Convert to an interactive plotly object
interactive_plotly <- interactive_scatter |>
  ggplotly(tooltip = c("x", "y", "color", "text"))

# Display the interactive plot
interactive_plotly

```


We can observe that there is a strong positive linear relationship between mean return and alpha. We can design new strategies based on this finding: apply Fama-French model to the return data, and select assets with good alpha. The advantages about this strategy is that it only uses idiosyncratic return as credential, not influenced by systematic risk, like the market risk premium, SMB or HML. 

**What does "good" mean?**
It can mean a consistently positive alpha, like MSFT, or an alpha with high mean but very unstable, like TSLA or NVDA, depending on the investor's strategy.




By faceting by asset, we can observe that different asset have a case. 

```{r, warning=FALSE}

# Create faceted scatter plots, one for each stock
faceted_plot <- clean_long_df |>
  ggplot(aes(x = alpha, y = mean)) +
  geom_point(color = "steelblue", alpha = 0.6) +
  facet_wrap(~ Stock, scales = "free") +
  labs(
    title = "Rolling Alpha vs Rolling Mean per Stock",
    x = "Rolling Alpha",
    y = "Rolling Mean"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  )

# Display the faceted scatter plots
print(faceted_plot)

```

#### Strong Linear Relationship: DIS, PG, NFLX, TSLA
These assets show strong linear relationship between alpha and mean return. When using Fama-French alpha as the trading strategy, these assets would be investors' top choice. 

#### Linear Relationship with Homoscedasticity Problem: BAC, GOOGL, MA
For these assets, the residuals of the linear model change as fitted values change. Investors should take the value into consideration. For example, when the alpha of MA is low, investors should be cautious when using alpha as the indicator, because the linear relationship between alpha and return is weak when alpha is low. 

#### Weak Linear Relationship: JPM, MSFT
For these assets, the alpha generated by the Fama-French model is not a good trading signal, because the linear relationship between alpha and return is very weak. 


### Why is alpha better than betas?

From the previous distribution plot, we can see that assets with high return (TSLA, NVDA, NFLX) not only have high $\alpha$, but also have high $\beta_1$, that is, they are also more exposed to the overall market performance. The following question is: can $\beta_1$ be a good indicator for trading strategies? 

In theory, a high $\beta_1$ only means the asset is more sensitive to the market. And it would only perform well when the market is good, but performs worse when market is bad. (For example: if $\beta_1=1.5$, when the market makes 2% return, the asset will make a 3% return, but when the market makes 2% loss, the asset will also make a 3% loss) However, the plots still show that top assets tend to have high $\beta_1$. We need further analysis to verify this observation. 

```{r, warning=FALSE}
beta1_df$Date <- as.Date(beta1_df$Date, format = "%Y-%m-%d")


merged_df <- rolling_mean_df |>
  inner_join(beta1_df, by = "Date", suffix = c("_mean", "_beta1"))

long_df <- merged_df |>
  pivot_longer(
    cols = -Date,                # Exclude the Date column
    names_to = c("Stock", "Metric"), # Split column names into Stock and Metric
    names_sep = "_",             # Separator between Stock and Metric
    values_to = "Value"          # Name of the new value column
  ) |>
  pivot_wider(
    names_from = "Metric",       # Spread Metric into separate columns
    values_from = "Value"        # Populate with corresponding values
  )


clean_long_df <- long_df |>
  drop_na(mean, beta1)

#interactive plot with plotly
interactive_scatter <- clean_long_df |>
  ggplot(aes(x = beta1, y = mean, color = Stock, text = paste("Stock:", Stock))) +
  geom_point(alpha = 0.6) +
  labs(
    title = "Rolling Beta1 vs Rolling Mean for Each Stock",
    x = "Rolling Beta1",
    y = "Rolling Mean",
    color = "Stock"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  )

# Convert to an interactive plotly object
interactive_plotly <- interactive_scatter |>
  ggplotly(tooltip = c("x", "y", "color", "text"))

# Display the interactive plot
interactive_plotly
```


From the scatter plot, we can see that $\beta_1$ do not affect mean return significantly. This finding supports our theory, and points out falsehood of "$\beta_1$ means high return" that the ridgeline plot has shown. 


#### Can we use beta to predict the return of specific asset?

Even faceted by asset, it is still hard to find linear relationship between $\beta_1$ and mean return. However, we do have some new findings from the plot below, that can motivate a deeper study for a particular asset. 

- V has a weak linear relationship
- For assets like AAPL, GOOGL, PG, MSFT, there is an obvious non-linear relationship that can still be modeled. 

```{r, warning=FALSE}

faceted_plot <- clean_long_df |>
  ggplot(aes(x = beta1, y = mean)) +
  geom_point(color = "steelblue", alpha = 0.6) +
  facet_wrap(~ Stock, scales = "free") +
  labs(
    title = "Rolling Beta1 vs Rolling Mean per Stock",
    x = "Rolling Beta1",
    y = "Rolling Mean"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5)
  )

# Display the faceted scatter plots
print(faceted_plot)

```


